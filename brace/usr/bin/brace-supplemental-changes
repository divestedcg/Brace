#!/bin/bash
#Copyright (c) 2017-2022 Divested Computing Group
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with this program.  If not, see <https://www.gnu.org/licenses/>.

if [ "$(/usr/bin/id -u)" -eq "0" ]; then
	if [ -f "/usr/lib/systemd/system/zram-swap.service" ]; then
		echo "Enabling zram-swap";
		systemctl enable zram-swap.service --now; #XXX: replaced by systemd-zram-generator
	fi;

	if [ -f "/usr/lib/systemd/system/fstrim.timer" ]; then
		echo "Enabling weekly fstrim";
		systemctl enable fstrim.timer --now;
	fi;

	#Repository Changes
	if [ -d "/etc/yum.repos.d" ]; then
		echo "Set all DNF repositories to HTTPS and disable countme?";
		select ys in "Yes" "Skip"; do
			case $ys in
				Yes )
					sed -i 's/metalink?repo=/metalink\?protocol\=https\&repo\=/' /etc/yum.repos.d/*.repo;
					sed -i 's/countme=1/countme=0/' /etc/yum.repos.d/*.repo;
					echo "Remember: This will need to be done again if any of them are updated!"
					break;;
				Skip )
					break;;
			esac
		done
	fi

	#Stealth Firewall
	if [ -x /usr/bin/firewall-cmd ]; then
		echo "Do you want a default drop firewall?";
		select ys in "Yes" "Skip"; do
			case $ys in
				Yes )
					firewall-cmd --set-default-zone=drop;
					#firewall-cmd --add-protocol=icmp --permanent;
					firewall-cmd --add-protocol=ipv6-icmp --permanent;
					firewall-cmd --add-service=dhcpv6-client --permanent;
					break;;
				Skip )
					#firewall-cmd --set-default-zone=public;
					break;;
			esac
		done
	fi

	#Kernel Command Line
	if [ -x /usr/sbin/grubby ]; then
		echo "Do you want a stricter kernel (via boot command-line arguments)?";
		select ys in "Yes" "Skip"; do
			case $ys in
				Yes )
					#Keep this in sync with grub defaults

					#Memory Hardening
					#grubby --update-kernel=ALL --args="mem_encrypt=on"; #Enables SME on supported AMD platforms #XXX: can break boot, usually doesn't work but TSME in UEFI may
					#grubby --update-kernel=ALL --args="efi=disable_early_pci_dma"; #Prevents DMA during early bringup #XXX: can break boot
					grubby --update-kernel=ALL --args="init_on_alloc=1"; #Zero pages on allocation
					grubby --update-kernel=ALL --args="init_on_free=1"; #Zero pages on free
					grubby --update-kernel=ALL --args="page_alloc.shuffle=1"; #Randomize free lists
					grubby --update-kernel=ALL --args="pti=on kpti=on"; #Enable page table isolation
					grubby --update-kernel=ALL --args="randomize_kstack_offset=1"; #Randomize kernel stacks
					grubby --update-kernel=ALL --args="slab_nomerge"; #Don't merge same-size slabs
					#grubby --update-kernel=ALL --args="slub_debug=FZ"; #Enables SLUB sanity checks and red-zoning, #XXX: extreme performance impact and enables unhashed memory addresses

					#IOMMU Enablement
					grubby --update-kernel=ALL --args="iommu=force"; #Ensure it is enabled in more cases
					grubby --update-kernel=ALL --args="iommu.passthrough=0"; #Always use the IOMMU for DMA
					grubby --update-kernel=ALL --args="iommu.strict=1"; #Do not defer invalidation of hardware TLBs
					grubby --update-kernel=ALL --args="intel_iommu=on"; #Ensure the IOMMU driver is enabled
					grubby --update-kernel=ALL --args="amd_iommu=force_isolation"; #Ensure the IOMMU driver is enabled #XXX can break boot with recent amd gpus

					#CPU Flaw Mitigations
					grubby --update-kernel=ALL --args="spec_store_bypass_disable=on ssbd=force-on"; #Enables SSB mitigations, including all userspace processes
					grubby --update-kernel=ALL --args="spectre_v2=on spectre_bhi=on"; #Enable spectre_v2 mitigations, including all userspace processes
					grubby --update-kernel=ALL --args="tsx=off"; #Disable TSX

					#Misc Hardening
					#grubby --update-kernel=ALL --args="debugfs=off"; #Disable debugfs entirely #XXX: may be of use
					grubby --update-kernel=ALL --args="lockdown=confidentiality"; #Restrict userspace access to certain kernel features/attributes
					grubby --update-kernel=ALL --args="mce=0"; #Panic on uncorrectable errors #XXX: deprecated in 5.18
					grubby --update-kernel=ALL --args="module.sig_enforce=1"; #Block modules with invalid signatures #XXX: superceded by lockdown
					#grubby --update-kernel=ALL --args="oops=panic"; #Panic system on oops #XXX: can turn minor issues into annoyances
					grubby --update-kernel=ALL --args="vsyscall=none"; #Disable unnecessary legacy functionality
					#grubby --update-kernel=ALL --args="ia32_emulation=false"; #Disable support for 32-bit execution
					#grubby --update-kernel=ALL --args="vdso32=0"; #Disable 32-bit VDSO
					grubby --update-kernel=ALL --args="efi_pstore.pstore_disable=1"; #Disable use of UEFI pstore backend
					grubby --update-kernel=ALL --args="erst_disable"; #Disable use of ACPI ERST pstore backend

					#Nice to haves
					grubby --update-kernel=ALL --args="fsck.mode=force"; #FSCK mounts every boot, systemd default is once per 30 boots
					grubby --update-kernel=ALL --args="i8042.reset=1"; #Workaround buggy laptop keyboard/touchpads
					grubby --update-kernel=ALL --args="libata.allow_tpm=1"; #OPAL support
					break;;
				Skip )
					break;;
			esac
		done
	fi;

	#Stronger Crypto
	if [ -x /usr/bin/update-crypto-policies ]; then
		echo "Do you want stricter crypto policies?";
		select yn in "Yes" "No"; do
			case $yn in
				Yes )
					update-crypto-policies --set NEXT;
					break;;
				No )
					update-crypto-policies --set DEFAULT; #:TEST-PQ
					break;;
			esac
		done
	fi;

	#Hostname
	if [ -x /usr/bin/hostnamectl ]; then
		echo "Do you want a random hostname?";
		select yls in "Yes" "localhost" "Skip"; do
			case $yls in
				Yes )
					randhost=$(head /dev/urandom | tr -dc a-z | head -c8);
					if [ -x /usr/bin/pwgen ]; then
						randhost=$(pwgen -A0 8 1);
					fi;
					hostnamectl set-hostname "$randhost";
					#echo "127.0.0.1 $randhost" >> /etc/hosts;
					break;;
				localhost )
					hostnamectl set-hostname "localhost";
					break;;
				Skip )
					break;;
			esac
		done
	fi;

	#Services
	if [ -x /usr/bin/systemctl ]; then
		echo "Do you want to disable many unnecessary services? (helps on low perf systems)";
		select ys in "Yes" "Skip"; do
			case $ys in
				Yes )
					systemctl disable gssproxy.service --now; #Auth
					systemctl disable pcscd.service pcscd.socket --now; #Smartcards
					systemctl disable abrtd.service abrt-journal-core.service abrt-oops.service abrt-pstoreoops.service abrt-vmcore.service abrt-xorg.service --now; #ABRT
					systemctl disable atd.service --now; #At/Batch
					systemctl disable mcelog.service --now; #mcelog
					systemctl disable avahi-daemon.service avahi-daemon.socket --now; #Avahi
					systemctl disable ModemManager.service --now; #ModemManager
					systemctl disable iscsid.service iscsid.socket iscsi-init.service iscsi.service iscsiuio.service iscsiuio.socket --now; #iSCSI
					systemctl disable livesys.service livesys-late.service --now; #Anaconda leftovers
					systemctl disable multipathd.service multipathd.socket --now; #Multipath
					systemctl disable smartd.service --now; #smartd
					systemctl disable vboxservice.service --now; #VirtualBox
					systemctl disable vmtoolsd.service --now; #VMWare
					systemctl disable passim.service --now; #LAN P2P file sharing used by fwupd
					break;;
				Skip )
					break;;
			esac
		done
	fi;
else
	#Looks
	if [ -d "/usr/share/fonts/adobe-source-code-pro" ]; then
		gsettings set org.gnome.builder.editor font-name 'Source Code Pro 10';
		gsettings set org.gnome.desktop.interface monospace-font-name 'Source Code Pro 10';
		gsettings set org.mate.desktop.interface monospace-font-name 'Source Code Pro 10';
	fi;
	if [ -f "/usr/share/fonts/mozilla-fira/FiraSans-Regular.otf" ] || [ -f "/usr/share/fonts/TTF/FiraSans-Regular.ttf" ]; then
		gsettings set org.gnome.desktop.interface font-name 'Fira Sans 10';
		gsettings set org.gnome.desktop.wm.preferences titlebar-font 'Fira Sans Bold 11';
		gsettings set org.cinnamon.desktop.interface font-name 'Fira Sans 10';
		#TODO cinnamon legacy title font
		gsettings set org.mate.caja.desktop font 'Fira Sans 10';
		gsettings set org.mate.desktop.interface font-name 'Fira Sans 10';
		gsettings set org.mate.marco.general titlebar-font 'Fira Sans Bold 11';
	fi;
	if [ -f "/usr/share/fonts/mozilla-fira/FiraMono-Regular.otf" ] || [ -f "/usr/share/fonts/TTF/FiraMono-Regular.ttf" ]; then
		gsettings set org.gnome.builder.editor font-name 'Fira Mono 10';
		gsettings set org.gnome.desktop.interface monospace-font-name 'Fira Mono 10';
		gsettings set org.gnome.gedit.preferences.editor editor-font 'Fira Mono 10';
		gsettings set org.cinnamon.desktop.interface monospace-font-name 'Fira Mono 10';
		gsettings set org.mate.desktop.interface monospace-font-name 'Fira Mono 10';
	fi;
	if [ -d "/usr/share/icons/Numix-Circle" ]; then
		gsettings set org.gnome.desktop.interface icon-theme 'Numix-Circle';
		gsettings set org.cinnamon.desktop.interface icon-theme 'Numix-Circle';
		gsettings set org.mate.desktop.interface icon-theme 'Numix-Circle';
	fi;

	#Thumbnails
	echo "Do you want thumbnails enabled? (brace default disabled)";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				#Only allow enabling thumbnailers where extra restrictions (eg. seccomp) are in place
				gsettings set org.gnome.desktop.thumbnailers disable-all false;
				#gsettings set org.cinnamon.desktop.thumbnailers disable-all false;
				#gsettings set org.mate.desktop.thumbnailers disable-all false;
				break;;
			No )
				gsettings set org.gnome.desktop.thumbnailers disable-all true;
				gsettings set org.cinnamon.desktop.thumbnailers disable-all true;
				gsettings set org.mate.desktop.thumbnailers disable-all true;
				break;;
		esac
	done

	#Night Light
	echo "Do you want GNOME Night Light enabled?";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true;
				break;;
			No )
				gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled false;
				break;;
		esac
	done

	#Power #TODO: MATE
	echo "Do you want auto suspend enabled?";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'suspend';
				gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'suspend';
				break;;
			No )
				gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing';
				gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing';
				break;;
		esac
	done

	#Search
	echo "Do you want search enabled? (brace default disabled)";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				gsettings set org.gnome.desktop.search-providers disable-external false;
				break;;
			No )
				gsettings set org.gnome.desktop.search-providers disable-external true;
				break;;
		esac
	done
	echo "Do you want Tracker enabled? (brace default disabled)";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				gsettings set org.freedesktop.Tracker3.Miner.Files enable-monitors true;
				gsettings set org.freedesktop.Tracker3.Miner.Files crawling-interval -1;
				systemctl unmask --user --now tracker-miner-fs-3.service || true;
				break;;
			No )
				gsettings set org.freedesktop.Tracker3.Miner.Files enable-monitors false;
				gsettings set org.freedesktop.Tracker3.Miner.Files crawling-interval -2;
				systemctl mask --user --now tracker-miner-fs-3.service || true;
				tracker3 reset -s || true;
				break;;
		esac
	done

	#Themes
	echo "Do you want the dark theme?";
	select yn in "Yes" "No"; do
		case $yn in
			Yes )
				gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark';
				gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark';
				gsettings set org.cinnamon.theme name 'Mint-Y-Dark';
				gsettings set org.cinnamon.desktop.interface gtk-theme 'Mint-Y-Dark';
				gsettings set org.cinnamon.desktop.wm.preferences theme 'Mint-Y-Dark';
				gsettings set org.mate.desktop.interface gtk-theme 'BlackMATE';
				gsettings set org.mate.marco.general theme 'BlackMATE';
				break;;
			No )
				gsettings set org.gnome.desktop.interface color-scheme 'default';
				gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita';
				gsettings set org.cinnamon.theme name 'Mint-Y';
				gsettings set org.cinnamon.desktop.interface gtk-theme 'Mint-Y';
				gsettings set org.cinnamon.desktop.wm.preferences theme 'Mint-Y';
				gsettings set org.mate.desktop.interface gtk-theme 'BlueMenta';
				gsettings set org.mate.marco.general theme 'BlueMenta';
				break;;
		esac
	done

	#Wallpaper
	echo "Would you like a solid color wallpaper?";
	select bgyrns in "Black" "Green" "Yellow" "Red" "No" "Skip"; do
		case $bgyrns in
			Black )
				gsettings set org.gnome.desktop.background primary-color '#000000';
				gsettings set org.cinnamon.desktop.background primary-color '#000000';
				gsettings set org.gnome.desktop.background picture-options 'none';
				break;;
			Green )
				gsettings set org.gnome.desktop.background primary-color '#1B5E20';
				gsettings set org.cinnamon.desktop.background primary-color '#1B5E20';
				gsettings set org.gnome.desktop.background picture-options 'none';
				break;;
			Yellow )
				gsettings set org.gnome.desktop.background primary-color '#FCBD02';
				gsettings set org.cinnamon.desktop.background primary-color '#FCBD02';
				gsettings set org.gnome.desktop.background picture-options 'none';
				break;;
			Red )
				gsettings set org.gnome.desktop.background primary-color '#880505';
				gsettings set org.cinnamon.desktop.background primary-color '#880505';
				gsettings set org.gnome.desktop.background picture-options 'none';
				break;;
			No )
				gsettings set org.gnome.desktop.background picture-options 'zoom';
				break;;
			Skip )
				break;;
		esac
	done
fi;

echo "Applied the supplemental changes";
